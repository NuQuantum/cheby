// Do not edit.  Generated by cheby 1.6.dev0 using these options:
//  -i gpio.cheby --hdl verilog --gen-hdl gpio.v
// Generated on Sat Aug 26 12:47:52 2023 by stefan



module gpio_regs
  (
    input   wire Clk,
    input   wire Rst,
    input   wire [4:2] VMEAddr,
    output  reg [31:0] VMERdData,
    input   wire [31:0] VMEWrData,
    input   wire VMERdMem,
    input   wire VMEWrMem,
    output  wire VMERdDone,
    output  wire VMEWrDone,
    output  wire VMERdError,
    output  wire VMEWrError,

    // REG ctrl
    output  wire [31:0] ctrl_o
  );
  wire rst_n;
  reg rd_ack_int;
  reg wr_ack_int;
  reg [31:0] ctrl_reg;
  reg ctrl_wreq;
  reg ctrl_wack;
  reg rd_ack_d0;
  reg [31:0] rd_dat_d0;
  reg wr_req_d0;
  reg [4:2] wr_adr_d0;
  reg [31:0] wr_dat_d0;
  assign rst_n = !Rst;
  assign VMERdDone = rd_ack_int;
  assign VMEWrDone = wr_ack_int;

  // pipelining for wr-in+rd-out
  always @(posedge(Clk) or negedge(rst_n))
  begin
    if (!rst_n)
      begin
        rd_ack_int <= 1'b0;
        wr_req_d0 <= 1'b0;
      end
    else
      begin
        rd_ack_int <= rd_ack_d0;
        VMERdData <= rd_dat_d0;
        wr_req_d0 <= VMEWrMem;
        wr_adr_d0 <= VMEAddr;
        wr_dat_d0 <= VMEWrData;
      end
  end

  // Register ctrl
  assign ctrl_o = ctrl_reg;
  always @(posedge(Clk) or negedge(rst_n))
  begin
    if (!rst_n)
      begin
        ctrl_reg <= 32'b00000000000000000000000000000000;
        ctrl_wack <= 1'b0;
      end
    else
      begin
        if (ctrl_wreq == 1'b1)
          ctrl_reg <= wr_dat_d0;
        ctrl_wack <= ctrl_wreq;
      end
  end

  // Process for write requests.
  always @(wr_adr_d0, wr_req_d0, ctrl_wack)
      begin
        ctrl_wreq <= 1'b0;
        case (wr_adr_d0[4:2])
        3'b000:
          begin
            // Reg ctrl
            ctrl_wreq <= wr_req_d0;
            wr_ack_int <= ctrl_wack;
          end
        default:
          wr_ack_int <= wr_req_d0;
        endcase
      end

  // Process for read requests.
  always @(VMEAddr, VMERdMem, ctrl_reg)
      begin
        // By default ack read requests
        rd_dat_d0 <= {32{1'bx}};
        case (VMEAddr[4:2])
        3'b000:
          begin
            // Reg ctrl
            rd_ack_d0 <= VMERdMem;
            rd_dat_d0 <= ctrl_reg;
          end
        default:
          rd_ack_d0 <= VMERdMem;
        endcase
      end
endmodule
